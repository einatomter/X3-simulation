// Generated by gencpp from file uuv_manipulators_msgs/EndeffectorState.msg
// DO NOT EDIT!


#ifndef UUV_MANIPULATORS_MSGS_MESSAGE_ENDEFFECTORSTATE_H
#define UUV_MANIPULATORS_MSGS_MESSAGE_ENDEFFECTORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_manipulators_msgs
{
template <class ContainerAllocator>
struct EndeffectorState_
{
  typedef EndeffectorState_<ContainerAllocator> Type;

  EndeffectorState_()
    : stamp()
    , state()
    , position(0.0)
    , effort(0.0)  {
    }
  EndeffectorState_(const ContainerAllocator& _alloc)
    : stamp()
    , state(_alloc)
    , position(0.0)
    , effort(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef double _position_type;
  _position_type position;

   typedef double _effort_type;
  _effort_type effort;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOVING)
  #undef MOVING
#endif
#if defined(_WIN32) && defined(DISABLED)
  #undef DISABLED
#endif
#if defined(_WIN32) && defined(READY)
  #undef READY
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MOVING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DISABLED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  READY;

  typedef boost::shared_ptr< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> const> ConstPtr;

}; // struct EndeffectorState_

typedef ::uuv_manipulators_msgs::EndeffectorState_<std::allocator<void> > EndeffectorState;

typedef boost::shared_ptr< ::uuv_manipulators_msgs::EndeffectorState > EndeffectorStatePtr;
typedef boost::shared_ptr< ::uuv_manipulators_msgs::EndeffectorState const> EndeffectorStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      EndeffectorState_<ContainerAllocator>::MOVING =
        
          "moving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      EndeffectorState_<ContainerAllocator>::DISABLED =
        
          "disabled"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      EndeffectorState_<ContainerAllocator>::READY =
        
          "ready"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator1> & lhs, const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.state == rhs.state &&
    lhs.position == rhs.position &&
    lhs.effort == rhs.effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator1> & lhs, const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_manipulators_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "696be13165827a929d588e22744f2679";
  }

  static const char* value(const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x696be13165827a92ULL;
  static const uint64_t static_value2 = 0x9d588e22744f2679ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_manipulators_msgs/EndeffectorState";
  }

  static const char* value(const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# States of the end-effector\n"
"time      stamp\n"
"string    state\n"
"# Default states\n"
"string    MOVING      = moving\n"
"string    DISABLED    = disabled\n"
"string    READY       = ready\n"
"# Current state\n"
"float64   position\n"
"float64   effort\n"
;
  }

  static const char* value(const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.state);
      stream.next(m.position);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EndeffectorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_manipulators_msgs::EndeffectorState_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_MANIPULATORS_MSGS_MESSAGE_ENDEFFECTORSTATE_H
