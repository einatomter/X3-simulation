<?xml version="1.0" ?>
<robot name="x3_rov_macros" xmlns:xacro="http://www.ros.org/wiki/xacro">

	<!-- properties/variables -->
	<xacro:arg name="debug" default="0"/>
	<xacro:arg name="namespace" default="x3_rov"/>
	<xacro:arg name="inertial_reference_frame" default="world"/>

	<!-- * * * inertial calculations * * * -->
	<!-- source: -->
	<!-- https://github.com/ros-industrial/universal_robot/blob/06d8b9e2f5f86aa54f9f2845f11edbc84e2f951e/ur_description/urdf/ur10.urdf.xacro#L12-L20 -->

	<!-- cylinder -->
	<xacro:macro name="cylinder_inertial" params="*origin mass radius length">
    <inertial>
      <mass value="${mass}" />
			<xacro:insert_block name="origin" />

      <inertia
		ixx="${0.0833333 * mass * (3 * radius * radius + length * length)}" ixy="0.0" ixz="0.0"
        iyy="${0.0833333 * mass * (3 * radius * radius + length * length)}" iyz="0.0"
        izz="${0.5 * mass * radius * radius}" 
			/>
    </inertial>
  </xacro:macro>


	<!-- * * * macros for creating links * * * -->

	<!-- create fin and attach to parent -->
	<xacro:macro name="x3_fin" params="suffix parent_link origin_xyz mass radius length">

		<link name="$(arg namespace)/fin_${suffix}_link">

			<xacro:cylinder_inertial 
				mass="${mass}" 
				radius="${radius}"
				length="${length}" 
			>
				<origin xyz="${-length/2} 0 0" rpy="0 ${pi/2} 0"/>
			</xacro:cylinder_inertial>

			<collision>
				<origin xyz="${-length/2} 0 0" rpy="0 ${pi/2} 0"/>
				<geometry>
					<cylinder radius="${radius}" length="${length}"/>
				</geometry>
			</collision>

			<visual>
				<origin rpy="0 ${pi/2} 0" xyz="${-length/2} 0 0"/>
				<geometry>
					<cylinder radius="1e-5" length="1e-5"/>
				</geometry>
				<material name="black"/>
			</visual>
		</link>


		<joint name="$(arg namespace)/fin_${suffix}_joint" type="fixed">
			<parent link="${parent_link}"/>
			<child link="$(arg namespace)/fin_${suffix}_link"/>
			<origin xyz="${origin_xyz}" rpy="0 0 0"/>
			<axis xyz="0 0 0"/>
		</joint>

	</xacro:macro>

	<!-- create thruster housing and attach to parent -->
	<xacro:macro name="x3_thruster" params="suffix parent_link origin_xyz mass radius length mirror">

		<link name="$(arg namespace)/thruster_conn_${suffix}_link">

			<xacro:cylinder_inertial 
				mass="${mass * 1/3}"
				radius="${radius * 2/3}"
				length="${length/2}" 
			>
				<origin xyz="${-length/4} 0 0" rpy="0 ${pi/2} 0"/>
			</xacro:cylinder_inertial>

			<collision>
				<origin xyz="${-length/4} 0 0" rpy="0 ${pi/2} 0"/>
				<geometry>
					<cylinder radius="${radius * 2/3}" length="${length/2}"/>
				</geometry>
			</collision>

			<visual>
				<origin xyz="${-length/4} 0 0" rpy="0 ${pi/2} 0" />
				<geometry>
					<cylinder radius="1e-5" length="1e-5"/>
				</geometry>
				<material name="black"/>
			</visual>
		</link>


		<joint name="$(arg namespace)/thruster_conn_${suffix}_joint" type="fixed">
			<parent link="${parent_link}"/>
			<child link="$(arg namespace)/thruster_conn_${suffix}_link"/>
			<origin xyz="${origin_xyz}" rpy="0 0 0"/>
			<axis xyz="0 0 0"/>
		</joint>


		<link name="$(arg namespace)/thruster_body_${suffix}_link">

			<xacro:cylinder_inertial 
				mass="${mass * 2/3}"
				radius="${radius}"
				length="${length/2}" 
			>
				<origin xyz="${-length/4} 0 0" rpy="0 ${pi/2} 0"/>
			</xacro:cylinder_inertial>

			<collision>
				<origin xyz="${-length/4} 0 0" rpy="0 ${pi/2} 0"/>
				<geometry>
					<cylinder radius="${radius}" length="${length/2}"/>
				</geometry>
			</collision>

			<visual>
				<origin xyz="${-length/4} 0 0" rpy="0 ${pi/2} 0"/>
				<geometry>
					<cylinder radius="1e-5" length="1e-5"/>
				</geometry>
				<material name="black"/>
			</visual>
		</link>

		<joint name="$(arg namespace)/thruster_body_${suffix}_joint" type="fixed">
			<parent link="$(arg namespace)/thruster_conn_${suffix}_link"/>
			<child link="$(arg namespace)/thruster_body_${suffix}_link"/>
			<origin xyz="${-length/2} ${mirror * radius * 1/8} 0" rpy="0 0 0"/>
			<axis xyz="0 0 0"/>
		</joint>

	</xacro:macro>


	<!-- camera macro - based off of uuv camera snippet with some modifications -->
	<xacro:macro name="x3_camera" params="parent_link suffix *origin">
		<link name="$(arg namespace)/camera${suffix}_link">
			<xacro:box_inertial 
				mass="1e-4"
				x="1e-4"
				y="1e-4"
				z="1e-4"
			>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			</xacro:box_inertial>

			<visual>
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<geometry>
				<box size="1e-4 1e-4 1e-4"/>
				</geometry>
			</visual>

			<collision>
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<geometry>
				<box size="1e-4 1e-4 1e-4"/>
				</geometry>
			</collision>
		</link>

		<joint name="$(arg namespace)/camera${suffix}_joint" type="revolute">
			<parent link="${parent_link}"/>
			<child link="$(arg namespace)/camera${suffix}_link"/>

			<xacro:insert_block name="origin" />
			<axis xyz="0 1 0"/>
			<limit effort="1e-6" lower="${-pi/6}" upper="${pi/6}" velocity="0.5"/>
		</joint>

		<transmission name="$(arg namespace)/camera${suffix}/trans">
			<type>transmission_interface/SimpleTransmission</type>
			<joint name="$(arg namespace)/camera${suffix}_joint">
				<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
			</joint>
			<actuator name="$(arg namespace)/camera${suffix}/motor">
				<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
				<mechanicalReduction>1</mechanicalReduction>
			</actuator>
		</transmission>

		<gazebo reference="$(arg namespace)/camera${suffix}_link">
			<sensor type="camera" name="camera${suffix}">
				<update_rate>30</update_rate>
				<camera name="camera${suffix}">
				<vertical_fov>115</vertical_fov>
				<image>
					<width>1920</width>
					<height>1080</height>
					<format>R8G8B8</format>
				</image>
				<clip>
					<near>0.05</near>
					<far>3000</far>
				</clip>
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.02</stddev>
				</noise>
				</camera>
				<plugin name="camera${suffix}_controller" filename="libgazebo_ros_camera.so">
				<updateRate>30</updateRate>
				<cameraName>$(arg namespace)/camera${suffix}</cameraName>
				<frameName>$(arg namespace)/camera${suffix}_link</frameName>

				<hackBaseline>0.07</hackBaseline>

				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>

				<attenuationR>0.0</attenuationR>
				<attenuationG>0.0</attenuationG>
				<attenuationB>0.0</attenuationB>

				<backgroundR>0</backgroundR>
				<backgroundG>0</backgroundG>
				<backgroundB>0</backgroundB>

				<imageTopicName>image_raw</imageTopicName>

				<!-- required for ros depth cam -->
				<!-- <pointCloudTopicName>image_cloud</pointCloudTopicName>
				<depthImageTopicName>image_depth</depthImageTopicName>
				<depthImageCameraInfoTopicName>image_depth_info</depthImageCameraInfoTopicName>
				<pointCloudCutoff>10.0</pointCloudCutoff> -->
				</plugin>
			</sensor>
		</gazebo>
	</xacro:macro>


	<!-- hydrodynamic_model -->
	<xacro:macro name="rov_hydro_model" params="parent_link mass length width height cob neutrally_buoyant">

		<gazebo>
			<plugin name="uuv_plugin" filename="libuuv_underwater_object_ros_plugin.so">
				<!-- Hydro parameters for the vehicle-->
				<fluid_density>1028.0</fluid_density>
				<flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
				<debug>$(arg debug)</debug>

				<link name="${parent_link}">
					<neutrally_buoyant>${neutrally_buoyant}</neutrally_buoyant>
					<volume>${mass/1028}</volume>
					<box>
						<width>${width}</width>
						<length>${length}</length>
						<height>${height}</height>
					</box>
					<center_of_buoyancy>${cob}</center_of_buoyancy>
					<hydrodynamic_model>
						<type>fossen</type>
						<added_mass>
						<!-- based on values from rexrov but tweaked -->
						<!-- not accurate at all currently -->
						 400    0    0     0    0    0
						   0  500    0     0    0    0
						   0    0 1600     6    0    0
						   0    0    0   500    0    0
						   0    0    0     0  800    0
						   0    0    0     0    0  200
						 <!-- 770    0    0     0    0    0
						   0 1200    0     0    0    0
						   0    0 3600     6    0    0
						   0    0    0   530    0    0
						   0    0    0     0  840    0
						   0    0    0     0    0  220 -->
						</added_mass>
						<!-- Linear damping: see p.31 in Berg2012 -->
						<linear_damping>
						 -50  -50  -100 -200 -200 -150
						 <!-- -70  -65 -700  -260 -300 -100 -->
						</linear_damping>
						<!-- Non-linear damping: see p.30 in Berg2012 -->
						<quadratic_damping>
						-740 -990 -1200 -400 -500 -400
						</quadratic_damping>
					</hydrodynamic_model>
				</link>
			</plugin>
		</gazebo>

	</xacro:macro>

	<!-- Thruster macro -->

	<!-- Common values, colors, converstion, standard shapes/inertia etc.
		Dependency for the thruster_snippets.xacro-->
	<xacro:include filename="$(find uuv_descriptions)/urdf/common.urdf.xacro"/>
	<xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/thruster_snippets.xacro"/>
	<!-- thruster model -->
	<xacro:property name="thruster_mesh_file" value="file://$(find x3_sim)/models/x3_low_poly_propeller.dae"/>

	<xacro:macro name="thruster_macro" params="thruster_id *origin">
		<xacro:thruster_module_first_order_basic_fcn_macro
			namespace="$(arg namespace)"
			thruster_id="${thruster_id}"
			mesh_filename="${thruster_mesh_file}"
			dyn_time_constant="0.05"
			rotor_constant="0.00025"
			>
			<xacro:insert_block name="origin"/>
		</xacro:thruster_module_first_order_basic_fcn_macro>
	</xacro:macro>



</robot>